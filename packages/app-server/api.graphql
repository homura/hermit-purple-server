### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  address: Address!
}

"""The `Address` of an account, encoded to 40 length lowercase hex string"""
scalar Address

type Block {
  """The current block hash"""
  blockHash: Hash!

  """Block height"""
  height: Int!

  """The ordered transactions Merkle root of a block"""
  orderRoot: Hash!

  """The prev block hash"""
  prevHash: Hash!

  """The proof of a bitmap"""
  proofBitmap: Bytes!

  """Proof of round"""
  proofRound: Uint64!

  """The proof of a signature for a block"""
  proofSignature: Bytes!

  """The address of the proposer of a block"""
  proposer: Address!

  """The Merkle root of state root"""
  stateRoot: Hash!
  timestamp: Timestamp!

  """Show how many transactions in the block"""
  transactionsCount: Int!
  validators: [Validator!]!

  """The version of validators"""
  validatorVersion: Uint64!
}

"""Bytes corresponding hex string"""
scalar Bytes

type Event {
  """Event payload, convenience for debug"""
  data: String!

  """The event emitted from which service"""
  service: String!
}

"""
A 64 length lowercase hex string, the output digest of [keccak](https://en.wikipedia.org/wiki/SHA-3) hash function
"""
scalar Hash

type Query {
  block(hash: Hash, height: Int): Block
  blocks(first: Int, last: Int, skip: Int): [Block!]!
  transaction(txHash: Hash): Transaction
  transactions(blockHeight: Int, first: Int, last: Int, skip: Int): [Transaction!]!
}

type Receipt {
  """Cycles used, similar to the `gasUsed` in eth"""
  cyclesUsed: Uint64!

  """True when transaction receipt is error """
  isError: Boolean

  """Transaction response, is often a string in json format"""
  ret: String
}

"""Millisecond timestamp"""
scalar Timestamp

type Transaction {
  block: Int!

  """Cycles price, similar to the `gasLimit` in eth"""
  cyclesLimit: Uint64!

  """Cycles price, similar to the `gasPrice` in eth"""
  cyclesPrice: Uint64!
  from: Address!

  """Represents what `method` does the transaction called """
  method: String!

  """A random 32 bytes, the `nonce` in Muta is difference with Ethereum"""
  nonce: Hash!
  order: Int!

  """Represents what `payload` of the transaction called method"""
  payload: String!

  """Public key of of a transaction sender"""
  pubkey: Bytes!
  receipt: Receipt

  """Represents what `service` does the transaction called """
  serviceName: String!

  """Signature of a transaction"""
  signature: Bytes!

  """The transaction hash"""
  txHash: Hash!
}

"""Uint64ï¼Œencoded to a hex string """
scalar Uint64

type Validator {
  """A validator address"""
  address: Address!

  """Propose weight of a validator"""
  proposeWeight: Int!

  """Vote weight of a validator"""
  voteWeight: Int!
}
