/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from "../service/index"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Address: string
  Bytes: string
  Hash: string
  Timestamp: any
  Uint64: string
}

export interface NexusGenRootTypes {
  Account: { // root type
    address: NexusGenScalars['Address']; // Address!
  }
  Block: { // root type
    blockHash: NexusGenScalars['Hash']; // Hash!
    height: number; // Int!
    orderRoot: NexusGenScalars['Hash']; // Hash!
    prevHash: NexusGenScalars['Hash']; // Hash!
    proofBitmap: NexusGenScalars['Bytes']; // Bytes!
    proofRound: NexusGenScalars['Uint64']; // Uint64!
    proofSignature: NexusGenScalars['Bytes']; // Bytes!
    proposer: NexusGenScalars['Address']; // Address!
    stateRoot: NexusGenScalars['Hash']; // Hash!
    timestamp: NexusGenScalars['Timestamp']; // Timestamp!
    transactionsCount: number; // Int!
    validatorVersion: NexusGenScalars['Uint64']; // Uint64!
  }
  Event: {};
  Query: {};
  Receipt: { // root type
    cyclesUsed: NexusGenScalars['Uint64']; // Uint64!
    isError?: boolean | null; // Boolean
    ret?: string | null; // String
  }
  Transaction: { // root type
    blockHeight: number; // Int!
    cyclesLimit: NexusGenScalars['Uint64']; // Uint64!
    cyclesPrice: NexusGenScalars['Uint64']; // Uint64!
    method: string; // String!
    nonce: NexusGenScalars['Hash']; // Hash!
    payload: string; // String!
    pubkey: NexusGenScalars['Bytes']; // Bytes!
    sender: NexusGenScalars['Address']; // Address!
    sequence: number; // Int!
    serviceName: string; // String!
    signature: NexusGenScalars['Bytes']; // Bytes!
    txHash: NexusGenScalars['Hash']; // Hash!
  }
  Validator: { // root type
    proposeWeight: number; // Int!
    pubkey: NexusGenScalars['Bytes']; // Bytes!
    voteWeight: number; // Int!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Address: NexusGenScalars['Address'];
  Bytes: NexusGenScalars['Bytes'];
  Hash: NexusGenScalars['Hash'];
  Timestamp: NexusGenScalars['Timestamp'];
  Uint64: NexusGenScalars['Uint64'];
}

export interface NexusGenFieldTypes {
  Account: { // field return type
    address: NexusGenScalars['Address']; // Address!
  }
  Block: { // field return type
    blockHash: NexusGenScalars['Hash']; // Hash!
    height: number; // Int!
    orderRoot: NexusGenScalars['Hash']; // Hash!
    prevHash: NexusGenScalars['Hash']; // Hash!
    proofBitmap: NexusGenScalars['Bytes']; // Bytes!
    proofRound: NexusGenScalars['Uint64']; // Uint64!
    proofSignature: NexusGenScalars['Bytes']; // Bytes!
    proposer: NexusGenScalars['Address']; // Address!
    stateRoot: NexusGenScalars['Hash']; // Hash!
    timestamp: NexusGenScalars['Timestamp']; // Timestamp!
    transactionsCount: number; // Int!
    validators: NexusGenRootTypes['Validator'][]; // [Validator!]!
    validatorVersion: NexusGenScalars['Uint64']; // Uint64!
  }
  Event: { // field return type
    data: string; // String!
    service: string; // String!
  }
  Query: { // field return type
    block: NexusGenRootTypes['Block'] | null; // Block
    blocks: NexusGenRootTypes['Block'][]; // [Block!]!
    transaction: NexusGenRootTypes['Transaction'] | null; // Transaction
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
  Receipt: { // field return type
    cyclesUsed: NexusGenScalars['Uint64']; // Uint64!
    isError: boolean | null; // Boolean
    ret: string | null; // String
  }
  Transaction: { // field return type
    blockHeight: number; // Int!
    cyclesLimit: NexusGenScalars['Uint64']; // Uint64!
    cyclesPrice: NexusGenScalars['Uint64']; // Uint64!
    method: string; // String!
    nonce: NexusGenScalars['Hash']; // Hash!
    payload: string; // String!
    pubkey: NexusGenScalars['Bytes']; // Bytes!
    receipt: NexusGenRootTypes['Receipt'] | null; // Receipt
    sender: NexusGenScalars['Address']; // Address!
    sequence: number; // Int!
    serviceName: string; // String!
    signature: NexusGenScalars['Bytes']; // Bytes!
    txHash: NexusGenScalars['Hash']; // Hash!
  }
  Validator: { // field return type
    proposeWeight: number; // Int!
    pubkey: NexusGenScalars['Bytes']; // Bytes!
    voteWeight: number; // Int!
  }
}

export interface NexusGenArgTypes {
  Query: {
    block: { // args
      hash?: NexusGenScalars['Hash'] | null; // Hash
      height?: number | null; // Int
    }
    blocks: { // args
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    transaction: { // args
      txHash?: NexusGenScalars['Hash'] | null; // Hash
    }
    transactions: { // args
      blockHeight?: number | null; // Int
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Account" | "Block" | "Event" | "Query" | "Receipt" | "Transaction" | "Validator";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Address" | "Boolean" | "Bytes" | "Float" | "Hash" | "ID" | "Int" | "String" | "Timestamp" | "Uint64";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.IService;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}