datasource postgres {
  provider = "postgres"
  url      = env("POSTGRESQL_URL")
  default  = true
}

generator client {
  provider = "prisma-client-js"
}

/// the block resource
model Block {
  height            Int           @id
  blockHash         String        @unique
  execHeight        Int
  transactionsCount Int
  preHash           String
  timestamp         DateTime
  orderRoot         String
  stateRoot         String
  proposer          String
  validatorVersion  String
  proofRound        String
  proofBlockHash    String
  proofSignature    String
  proofBitmap       String
  transactions      Transaction[]
  validators        Validator[]
}


model Transaction {
  /// the order of the transaction
  order          Int            @id @default(autoincrement())
  /// hex, hash of the transaction
  txHash         String         @unique
  /// transaction called service name
  serviceName    String
  /// transaction called method
  method         String
  /// the payload of this transaction
  payload        String
  cyclesPrice    String
  cyclesLimit    String
  nonce          String
  pubkey         String
  signature      String
  chainId        String
  timeout        String
  block          Block
  /// transaction send from account
  from           Account
  // receipt
  receiptIsError Boolean?
  /// events in revant receipt
  events         Event[]
  /// receipt return data, is often a json
  receiptRet     String?
  /// cycles used of the transaction
  cyclesUsed     String?
  // union transaction
  createdAsset   Asset?
  transfer       AssetTransfer?
}

model Event {
  id      Int         @default(autoincrement()) @id
  receipt Transaction
  service String
  data    String
}

model Validator {
  address       String  @id
  proposeWeight Int
  voteWeight    Int
  blocks        Block[]
}

model Account {
  address      String          @id
  transactions Transaction[]
  assets       Asset[]
  transferFrom AssetTransfer[] @relation(name: "TransferFrom")
  transferTo   AssetTransfer[] @relation(name: "TransferTo")
  balances     Balance[]
}

model Asset {
  assetId     String      @id
  name        String
  symbol      String
  /// the transaction of the issuer creating this asset
  transaction Transaction @unique
  // hex, differents with AssetService 
  supply      String
  /// holders of this asset
  balances    Balance[]
}

model AssetTransfer {
  id          Int         @default(autoincrement()) @id
  asset       Asset
  transaction Transaction @unique
  /// the account of transfer from in the transfer
  from        Account     @relation(name: "TransferFrom")
  /// the account of transfer in the transfer
  to          Account     @relation(name: "TransferTo")
  /// hex, differents with AssetService
  value       String
}

model Balance {
  id       Int     @default(autoincrement()) @id
  /// keccakHash(accountAddress + assetId)
  compound String  @unique
  asset    Asset
  account  Account
  /// Uint64
  balance  String
}