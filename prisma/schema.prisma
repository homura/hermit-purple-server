datasource postgres {
  provider = "postgres"
  url      = env("POSTGRESQL_URL")
  default  = true
}

generator client {
  provider = "prisma-client-js"
}

model Block {
  id                Int           @default(autoincrement()) @id
  height            Int           @unique
  transactionsCount Int
  transactions      Transaction[]
  preHash           String
  timestamp         DateTime
  orderRoot         String
  stateRoot         String
  proposer          String
  proof             Proof
  validatorVersion  String
  validators        Validator[]
}

model Validator {
  id            Int     @default(autoincrement()) @id
  address       String  @unique
  proposeWeight Int
  voteWeight    Int
  blocks        Block[]
}

model Transaction {
  id           Int            @default(autoincrement()) @id
  txHash       String         @unique
  receipt      Receipt?
  block        Block
  serviceName  String
  method       String
  payload      String
  cyclesPrice  String
  cyclesLimit  String
  nonce        String
  pubkey       String
  signature    String
  chainId      String
  timeout      String
  account      Account
  createdAsset Asset?
  transfer     AssetTransfer?
}

model Receipt {
  id          Int             @default(autoincrement()) @id
  transaction Transaction
  cyclesUsed  String
  events      Event[]
  response    ReceiptResponse
}

model ReceiptResponse {
  id      Int     @default(autoincrement()) @id
  receipt Receipt
  ret     String
  isError Boolean
}

model Event {
  id      Int     @default(autoincrement()) @id
  receipt Receipt
  service String
  data    String
}

model Proof {
  id        Int    @default(autoincrement()) @id
  height    Int
  round     Int
  blockHash String
  signature String
  bitmap    String
}

model Account {
  id           Int             @default(autoincrement()) @id
  address      String          @unique
  transactions Transaction[]
  assets       Asset[]
  transferFrom AssetTransfer[] @relation(name: "TransferFrom")
  transferTo   AssetTransfer[] @relation(name: "TransferTo")
}

model Asset {
  id                  Int         @default(autoincrement()) @id
  assetId             String      @unique
  name                String
  symbol              String
  creationTransaction Transaction @unique
  // hex, differents with AssetService 
  supply              String
  account             Account
}

model AssetTransfer {
  id          Int         @default(autoincrement()) @id
  asset       Asset
  transaction Transaction @unique
  // the account of transfer from in the transfer
  from        Account     @relation(name: "TransferFrom")
  // the account of transfer in the transfer
  to          Account     @relation(name: "TransferTo")
  // hex, differents with AssetService
  value       String
}